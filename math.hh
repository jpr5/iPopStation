#ifndef PS_MATH_HH
#define PS_MATH_HH

/*
 * $Id$
 */

#include <stdint.h>

// for fixed-point arithmetic, we need minimum 32-bit long
// long long (64-bit) might be useful for multiplication and division
typedef int32_t FPreal_t;

#define IANGLE_MAX    1024
#define IANGLE_MASK   1023

// warning: regenerate the table if IANGLE_MAX and PFREAL_SHIFT are changed!
static const FPreal_t sinTable[IANGLE_MAX] = {
     3,      9,     15,     21,     28,     34,     40,     47,
    53,     59,     65,     72,     78,     84,     90,     97,
   103,    109,    115,    122,    128,    134,    140,    147,
   153,    159,    165,    171,    178,    184,    190,    196,
   202,    209,    215,    221,    227,    233,    239,    245,
   251,    257,    264,    270,    276,    282,    288,    294,
   300,    306,    312,    318,    324,    330,    336,    342,
   347,    353,    359,    365,    371,    377,    383,    388,
   394,    400,    406,    412,    417,    423,    429,    434,
   440,    446,    451,    457,    463,    468,    474,    479,
   485,    491,    496,    501,    507,    512,    518,    523,
   529,    534,    539,    545,    550,    555,    561,    566,
   571,    576,    581,    587,    592,    597,    602,    607,
   612,    617,    622,    627,    632,    637,    642,    647,
   652,    656,    661,    666,    671,    675,    680,    685,
   690,    694,    699,    703,    708,    712,    717,    721,
   726,    730,    735,    739,    743,    748,    752,    756,
   760,    765,    769,    773,    777,    781,    785,    789,
   793,    797,    801,    805,    809,    813,    816,    820,
   824,    828,    831,    835,    839,    842,    846,    849,
   853,    856,    860,    863,    866,    870,    873,    876,
   879,    883,    886,    889,    892,    895,    898,    901,
   904,    907,    910,    913,    916,    918,    921,    924,
   927,    929,    932,    934,    937,    939,    942,    944,
   947,    949,    951,    954,    956,    958,    960,    963,
   965,    967,    969,    971,    973,    975,    977,    978,
   980,    982,    984,    986,    987,    989,    990,    992,
   994,    995,    997,    998,    999,   1001,   1002,   1003,
  1004,   1006,   1007,   1008,   1009,   1010,   1011,   1012,
  1013,   1014,   1015,   1015,   1016,   1017,   1018,   1018,
  1019,   1019,   1020,   1020,   1021,   1021,   1022,   1022,
  1022,   1023,   1023,   1023,   1023,   1023,   1023,   1023,
  1023,   1023,   1023,   1023,   1023,   1023,   1023,   1022,
  1022,   1022,   1021,   1021,   1020,   1020,   1019,   1019,
  1018,   1018,   1017,   1016,   1015,   1015,   1014,   1013,
  1012,   1011,   1010,   1009,   1008,   1007,   1006,   1004,
  1003,   1002,   1001,    999,    998,    997,    995,    994,
   992,    990,    989,    987,    986,    984,    982,    980,
   978,    977,    975,    973,    971,    969,    967,    965,
   963,    960,    958,    956,    954,    951,    949,    947,
   944,    942,    939,    937,    934,    932,    929,    927,
   924,    921,    918,    916,    913,    910,    907,    904,
   901,    898,    895,    892,    889,    886,    883,    879,
   876,    873,    870,    866,    863,    860,    856,    853,
   849,    846,    842,    839,    835,    831,    828,    824,
   820,    816,    813,    809,    805,    801,    797,    793,
   789,    785,    781,    777,    773,    769,    765,    760,
   756,    752,    748,    743,    739,    735,    730,    726,
   721,    717,    712,    708,    703,    699,    694,    690,
   685,    680,    675,    671,    666,    661,    656,    652,
   647,    642,    637,    632,    627,    622,    617,    612,
   607,    602,    597,    592,    587,    581,    576,    571,
   566,    561,    555,    550,    545,    539,    534,    529,
   523,    518,    512,    507,    501,    496,    491,    485,
   479,    474,    468,    463,    457,    451,    446,    440,
   434,    429,    423,    417,    412,    406,    400,    394,
   388,    383,    377,    371,    365,    359,    353,    347,
   342,    336,    330,    324,    318,    312,    306,    300,
   294,    288,    282,    276,    270,    264,    257,    251,
   245,    239,    233,    227,    221,    215,    209,    202,
   196,    190,    184,    178,    171,    165,    159,    153,
   147,    140,    134,    128,    122,    115,    109,    103,
    97,     90,     84,     78,     72,     65,     59,     53,
    47,     40,     34,     28,     21,     15,      9,      3,
    -4,    -10,    -16,    -22,    -29,    -35,    -41,    -48,
   -54,    -60,    -66,    -73,    -79,    -85,    -91,    -98,
  -104,   -110,   -116,   -123,   -129,   -135,   -141,   -148,
  -154,   -160,   -166,   -172,   -179,   -185,   -191,   -197,
  -203,   -210,   -216,   -222,   -228,   -234,   -240,   -246,
  -252,   -258,   -265,   -271,   -277,   -283,   -289,   -295,
  -301,   -307,   -313,   -319,   -325,   -331,   -337,   -343,
  -348,   -354,   -360,   -366,   -372,   -378,   -384,   -389,
  -395,   -401,   -407,   -413,   -418,   -424,   -430,   -435,
  -441,   -447,   -452,   -458,   -464,   -469,   -475,   -480,
  -486,   -492,   -497,   -502,   -508,   -513,   -519,   -524,
  -530,   -535,   -540,   -546,   -551,   -556,   -562,   -567,
  -572,   -577,   -582,   -588,   -593,   -598,   -603,   -608,
  -613,   -618,   -623,   -628,   -633,   -638,   -643,   -648,
  -653,   -657,   -662,   -667,   -672,   -676,   -681,   -686,
  -691,   -695,   -700,   -704,   -709,   -713,   -718,   -722,
  -727,   -731,   -736,   -740,   -744,   -749,   -753,   -757,
  -761,   -766,   -770,   -774,   -778,   -782,   -786,   -790,
  -794,   -798,   -802,   -806,   -810,   -814,   -817,   -821,
  -825,   -829,   -832,   -836,   -840,   -843,   -847,   -850,
  -854,   -857,   -861,   -864,   -867,   -871,   -874,   -877,
  -880,   -884,   -887,   -890,   -893,   -896,   -899,   -902,
  -905,   -908,   -911,   -914,   -917,   -919,   -922,   -925,
  -928,   -930,   -933,   -935,   -938,   -940,   -943,   -945,
  -948,   -950,   -952,   -955,   -957,   -959,   -961,   -964,
  -966,   -968,   -970,   -972,   -974,   -976,   -978,   -979,
  -981,   -983,   -985,   -987,   -988,   -990,   -991,   -993,
  -995,   -996,   -998,   -999,  -1000,  -1002,  -1003,  -1004,
 -1005,  -1007,  -1008,  -1009,  -1010,  -1011,  -1012,  -1013,
 -1014,  -1015,  -1016,  -1016,  -1017,  -1018,  -1019,  -1019,
 -1020,  -1020,  -1021,  -1021,  -1022,  -1022,  -1023,  -1023,
 -1023,  -1024,  -1024,  -1024,  -1024,  -1024,  -1024,  -1024,
 -1024,  -1024,  -1024,  -1024,  -1024,  -1024,  -1024,  -1023,
 -1023,  -1023,  -1022,  -1022,  -1021,  -1021,  -1020,  -1020,
 -1019,  -1019,  -1018,  -1017,  -1016,  -1016,  -1015,  -1014,
 -1013,  -1012,  -1011,  -1010,  -1009,  -1008,  -1007,  -1005,
 -1004,  -1003,  -1002,  -1000,   -999,   -998,   -996,   -995,
  -993,   -991,   -990,   -988,   -987,   -985,   -983,   -981,
  -979,   -978,   -976,   -974,   -972,   -970,   -968,   -966,
  -964,   -961,   -959,   -957,   -955,   -952,   -950,   -948,
  -945,   -943,   -940,   -938,   -935,   -933,   -930,   -928,
  -925,   -922,   -919,   -917,   -914,   -911,   -908,   -905,
  -902,   -899,   -896,   -893,   -890,   -887,   -884,   -880,
  -877,   -874,   -871,   -867,   -864,   -861,   -857,   -854,
  -850,   -847,   -843,   -840,   -836,   -832,   -829,   -825,
  -821,   -817,   -814,   -810,   -806,   -802,   -798,   -794,
  -790,   -786,   -782,   -778,   -774,   -770,   -766,   -761,
  -757,   -753,   -749,   -744,   -740,   -736,   -731,   -727,
  -722,   -718,   -713,   -709,   -704,   -700,   -695,   -691,
  -686,   -681,   -676,   -672,   -667,   -662,   -657,   -653,
  -648,   -643,   -638,   -633,   -628,   -623,   -618,   -613,
  -608,   -603,   -598,   -593,   -588,   -582,   -577,   -572,
  -567,   -562,   -556,   -551,   -546,   -540,   -535,   -530,
  -524,   -519,   -513,   -508,   -502,   -497,   -492,   -486,
  -480,   -475,   -469,   -464,   -458,   -452,   -447,   -441,
  -435,   -430,   -424,   -418,   -413,   -407,   -401,   -395,
  -389,   -384,   -378,   -372,   -366,   -360,   -354,   -348,
  -343,   -337,   -331,   -325,   -319,   -313,   -307,   -301,
  -295,   -289,   -283,   -277,   -271,   -265,   -258,   -252,
  -246,   -240,   -234,   -228,   -222,   -216,   -210,   -203,
  -197,   -191,   -185,   -179,   -172,   -166,   -160,   -154,
  -148,   -141,   -135,   -129,   -123,   -116,   -110,   -104,
   -98,    -91,    -85,    -79,    -73,    -66,    -60,    -54,
   -48,    -41,    -35,    -29,    -22,    -16,    -10,     -4
};

/*
 * "Fixed-Point Real" numbers, accomplished by taking all the
 * computations that would normally use real #'s and shift their
 * precision into the whole-number realm.
 *
 * For the ray-tracing code, only sin() and cos() are needed.  For
 * mul() and div(), the operations are forced to work with 64 bits for
 * added precision, and the results have the added precision chopped
 * off and are recast back to FPreal_t's.
 */

static const FPreal_t FPreal_SHIFT = 10;
static const FPreal_t FPreal_ONE   = (1 << FPreal_SHIFT);
static const FPreal_t FPreal_HALF  = (FPreal_ONE >> 1);

#define FPreal_CAST(x) ((x) >> FPreal_SHIFT)

inline FPreal_t fsin(int iangle) {
    while (iangle < 0)
        iangle += IANGLE_MAX;
    return sinTable[iangle & IANGLE_MASK];
}

// quarter phase shift
inline FPreal_t fcos(int iangle) {
    return fsin(iangle + (IANGLE_MAX >> 2));
}

inline FPreal_t fmul(FPreal_t a, FPreal_t b) {
    return FPreal_CAST(((int64_t)(a))*((int64_t)(b)));
}

inline FPreal_t fdiv(FPreal_t num, FPreal_t den) {
    int64_t p = (int64_t)(num) << (FPreal_SHIFT*2);
    int64_t q = p / (int64_t)den;
    int64_t r = FPreal_CAST(q);

    return r;
}


#endif
